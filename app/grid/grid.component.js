"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var letter_component_1 = require("./letter.component");
var router_1 = require("nativescript-angular/router");
var GridComponent = /** @class */ (function () {
    function GridComponent(router) {
        this.router = router;
        this.rows = 10;
        this.cols = 10;
        this.alphabet = "abcdefghijklmnopqrstuvwxyz";
        this.words = ["OBJECTIVEC", "VARIABLE", "KOTLIN", "MOBILE", "SWIFT", "JAVA"];
        this.wordFound = "Word found!";
        this.wordInvalid = "Not quite! Try again.";
        this.allWordsFound = "Congratulations! You found all the words!";
        this.selectedLetters = [];
        this.foundWords = [];
        this.grid = [[]];
        this.validationMessage = "";
    }
    GridComponent.prototype.ngOnInit = function () {
        this.selectedLetters = [];
        this.buildGrid();
    };
    GridComponent.prototype.letterClick = function (col) {
        this.validationMessage = "";
        if (typeof col != undefined) {
            col.clickNum++;
            if (col.clickNum % 2 != 0) { //odd numbers mean it has been selected
                this.selectedLetters.push(col);
                col.indexInSelection = this.selectedLetters.length - 1;
            }
            else if (col.clickNum > 0) { //it has been unselected
                //find it in selectedLetters, confirm that it is the same letter, and remove it
                var indexToRemove = col.indexInSelection;
                if (this.selectedLetters[indexToRemove].value === col.value) {
                    this.selectedLetters.splice(indexToRemove, 1);
                    //decrement index of all proceeding selected letters
                    for (var i = indexToRemove; i < this.selectedLetters.length; i++) {
                        this.selectedLetters[i].indexInSelection--;
                    }
                }
            }
        }
    };
    GridComponent.prototype.validateSelection = function () {
        var selectedWord = "";
        var isValid = true;
        for (var _i = 0, _a = this.selectedLetters; _i < _a.length; _i++) {
            var letter = _a[_i];
            selectedWord = selectedWord.concat(letter.value);
            //check that letters appear all in straight row, column, or diagonal
            //row and col differences should always either be 1 or 0
            var i = this.selectedLetters.indexOf(letter);
            if (i > 0) {
                var colDiff = this.selectedLetters[i].col - this.selectedLetters[i - 1].col;
                var rowDiff = this.selectedLetters[i].row - this.selectedLetters[i - 1].row;
                if (colDiff > 1 || colDiff < 0 || rowDiff > 1 || rowDiff < 0) {
                    this.validationMessage = this.wordInvalid;
                    isValid = false;
                }
            }
        }
        if (!isValid) {
            for (var _b = 0, _c = this.selectedLetters; _b < _c.length; _b++) {
                var letter = _c[_b];
                this.grid[letter.row][letter.col].clickNum = 0;
            }
        }
        this.selectedLetters = [];
        if (isValid) {
            if (typeof this.words.indexOf(selectedWord) !== undefined && this.words.indexOf(selectedWord) > -1) {
                this.foundWords.push(this.words.splice(this.words.indexOf(selectedWord), 1));
                this.validationMessage = this.wordFound;
                if (this.words.length === 0) {
                    this.validationMessage = this.allWordsFound;
                }
                return true;
            }
        }
        return false;
    };
    GridComponent.prototype.buildGrid = function () {
        var newGrid = [[]];
        newGrid.length = 0;
        for (var i = 0; i < this.rows; i++) {
            var currentRow = [];
            for (var j = 0; j < this.cols; j++) {
                var rand = this.getRandomInt(26);
                var letter = this.alphabet[rand].toString().toUpperCase();
                var currentSpace = new letter_component_1.LetterComponent(false, letter);
                currentSpace.row = i;
                currentSpace.col = j;
                currentRow.push(currentSpace);
            }
            newGrid.push(currentRow);
        }
        this.grid = newGrid;
        this.placeWords();
    };
    GridComponent.prototype.placeWords = function () {
        for (var _i = 0, _a = this.words; _i < _a.length; _i++) {
            var word = _a[_i];
            var wordAsComponents = [];
            for (var _b = 0, word_1 = word; _b < word_1.length; _b++) {
                var letter = word_1[_b];
                wordAsComponents.push(new letter_component_1.LetterComponent(true, letter));
            }
            //randomly determine orientation
            var orientation_1 = this.getRandomInt(3);
            var placedWord = this.getIndexes(wordAsComponents, orientation_1);
            for (var _c = 0, placedWord_1 = placedWord; _c < placedWord_1.length; _c++) {
                var letter = placedWord_1[_c];
                this.grid[letter.row][letter.col] = letter;
            }
        }
    };
    GridComponent.prototype.getIndexes = function (word, orientation) {
        var rowIndex = 0;
        var colIndex = 0;
        switch (orientation) {
            case 0: { //horizontal
                //need to limit colIndex to make sure word fits
                colIndex = this.getRandomIndex(word);
                //rowIndex can be any index on vertical axis of grid
                rowIndex = this.getRandomInt(this.rows);
                var i = 0;
                while (i < word.length) {
                    var currIndex = this.grid[rowIndex][colIndex];
                    if (typeof currIndex !== 'undefined' && currIndex.value !== word[i].value && currIndex.isInWord) {
                        //restart word, one row down
                        rowIndex = this.getRandomInt(this.rows);
                        colIndex = this.getRandomIndex(word);
                        i = 0;
                        continue;
                    }
                    else {
                        word[i].row = rowIndex;
                        word[i].col = colIndex;
                        colIndex++;
                        i++;
                    }
                }
                break;
            }
            case 1: { //vertical
                //need to limit rowIndex to make sure word fits
                rowIndex = this.getRandomIndex(word);
                //rowIndex can be any index on vertical axis of grid
                colIndex = this.getRandomInt(this.rows);
                var i = 0;
                while (i < word.length) {
                    var currIndex = this.grid[rowIndex][colIndex];
                    if (typeof currIndex !== 'undefined' && currIndex.value !== word[i].value && currIndex.isInWord) {
                        //restart word, one col over
                        colIndex = this.getRandomInt(this.cols);
                        rowIndex = this.getRandomIndex(word);
                        i = 0;
                        continue;
                    }
                    else {
                        word[i].row = rowIndex;
                        word[i].col = colIndex;
                        rowIndex++;
                        i++;
                    }
                }
                break;
            }
            case 2: { //diagonal
                rowIndex = this.getRandomIndex(word);
                colIndex = this.getRandomIndex(word);
                var i = 0;
                while (i < word.length) {
                    var currIndex = this.grid[rowIndex][colIndex];
                    if (typeof currIndex !== 'undefined' && currIndex.value !== word[i].value && currIndex.isInWord) {
                        //restart word, one col over and one row down
                        colIndex = this.getRandomIndex(word);
                        rowIndex = this.getRandomIndex(word);
                        i = 0;
                        continue;
                    }
                    else {
                        word[i].row = rowIndex;
                        word[i].col = colIndex;
                        rowIndex++;
                        colIndex++;
                        i++;
                    }
                }
                break;
            }
            default: {
                break;
            }
        }
        return word;
    };
    GridComponent.prototype.getRandomIndex = function (word) {
        //assume this.rows = this.cols
        var possibleSpaces = this.rows - word.length;
        var index = this.getRandomInt(possibleSpaces + 1);
        return index;
    };
    GridComponent.prototype.getRandomInt = function (max) {
        return Math.floor(Math.random() * Math.floor(max));
    };
    GridComponent.prototype.returnHome = function () {
        this.router.back();
    };
    GridComponent = __decorate([
        core_1.Component({
            selector: "Grid",
            moduleId: module.id,
            templateUrl: "./grid.component.html",
            styleUrls: ["./grid.component.css"]
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions])
    ], GridComponent);
    return GridComponent;
}());
exports.GridComponent = GridComponent;
//# sourceMappingURL=data:application/json;base64,